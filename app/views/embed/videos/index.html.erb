<div class="col-md-12">
	<div style = "text-align:center;">
		<h2>Media Recorder </h2>
		<video controls autoplay src="<%= @video.try(:file_url) %>"></video><br>
		<button class="btn btn-danger btn-sm" id="rec" onclick="onBtnRecordClicked()">Record</button>
		<button class="btn btn-default btn-sm" id="pauseRes"   onclick="onPauseResumeClicked()" disabled>Pause</button>
		<button class="btn btn-primary btn-sm" id="stop"  onclick="onBtnStopClicked()" disabled>Stop</button>
		<p>
			<span id="data" class="data-align"></span>
			<span id="current"></span>
			<span id="duration"></span>
		</p>
	 </div>
	<div class="col-md-12">
		<p>
			<span class="col-md-2 pull-right"><a class="btn btn-default btn-sm"  id="downloadLink" download="mediarecorder.webm" name="mediarecorder.webm" href="<%= @video.try(:file_url) %>" style="display:<%= @video.present? ? 'block' : 'none' %>;">Download</a></span>
			<% if @video.present? %>
				<span class="col-md-8 social_media">
					<%= render "embed/videos/shared_links" %>
				</span>
			<%end%>
			<%= form_for Video.new, url: embed_videos_path, remote: true, method: :post do |f|%>
			<%end%>
		</p>
	</div>
</div>
<script type="text/javascript">
	'use strict';

	navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

	$('#data').hide();
	if(getBrowser() == "Chrome"){
		var constraints = {"audio": true, "video": {  "mandatory": {  "minWidth": 640,  "maxWidth": 640, "minHeight": 480,"maxHeight": 480 }, "optional": [] } };//Chrome
	}else if(getBrowser() == "Firefox"){
		var constraints = {audio: true,video: {  width: { min: 640, ideal: 640, max: 640 },  height: { min: 480, ideal: 480, max: 480 }}}; //Firefox
	}

	var recBtn = document.querySelector('button#rec');
	var pauseResBtn = document.querySelector('button#pauseRes');
	var stopBtn = document.querySelector('button#stop');

	var videoElement = document.querySelector('video');
	var dataElement = document.querySelector('#data');
	var downloadLink = document.querySelector('a#downloadLink');

	videoElement.controls = true;

	function errorCallback(error){
		console.log('navigator.getUserMedia error: ', error);	
	}

	var mediaRecorder;
	var chunks = [];
	var count = 0;

	function startRecording(stream) {
		log('Start recording...');
		if (typeof MediaRecorder.isTypeSupported == 'function'){

			if (MediaRecorder.isTypeSupported('video/webm;codecs=vp9')) {
			  var options = {mimeType: 'video/webm;codecs=vp9'};
			} else if (MediaRecorder.isTypeSupported('video/webm;codecs=h264')) {
			  var options = {mimeType: 'video/webm;codecs=h264'};
			} else  if (MediaRecorder.isTypeSupported('video/webm;codecs=vp8')) {
			  var options = {mimeType: 'video/webm;codecs=vp8'};
			}
			log('Using '+options.mimeType);
			mediaRecorder = new MediaRecorder(stream, options);
		}else{
			log('isTypeSupported is not supported, using default codecs for browser');
			mediaRecorder = new MediaRecorder(stream);
		}

		videoElement.src = "";
		videoElement.currentTime = 0;
		videoElement.load();

		pauseResBtn.textContent = "Pause";

		mediaRecorder.start(10);

		var url = window.URL || window.webkitURL;
		videoElement.src = url ? url.createObjectURL(stream) : stream;
		videoElement.play();

		mediaRecorder.ondataavailable = function(e) {
			chunks.push(e.data);
		};

		mediaRecorder.onerror = function(e){
			log('Error: ' + e);
			console.log('Error: ', e);
		};


		mediaRecorder.onstart = function(){
			log('Started & state = ' + mediaRecorder.state);
		};

		mediaRecorder.onstop = function(){
			log('Stopped  & state = ' + mediaRecorder.state);
			console.log("blob..............");
			var blob = new Blob(chunks, {type: "video/webm"});
			chunks = [];
			console.log("blob");
			console.log(blob);

			var videoURL = window.URL.createObjectURL(blob);
			downloadLink.style.display = 'block';
			downloadLink.href = videoURL;
			videoElement.src = videoURL;
			downloadLink.innerHTML = 'Download video file';

			var rand =  Math.floor((Math.random() * 10000000));
			var name  = "video_"+rand+".webm" ;

			downloadLink.setAttribute( "download", name);
			downloadLink.setAttribute( "name", name);

			console.log('videoURL');
			console.log(videoURL);

			var data = new FormData($('#new_video')[0]);
			data.append("file", blob, (new Date()).getTime() + ".webm");
			// var oReq = new XMLHttpRequest();
      // oReq.open("POST", "/save_video");
      // oReq.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
      // oReq.send(data);
   		$.ajax({
   			url: '/embed/videos',
   			type: 'post',
   			data : data,
   			dataType: 'script',
   			contentType: false,
   			processData: false
   		})
		};

		mediaRecorder.onpause = function(){
			log('Paused & state = ' + mediaRecorder.state);
			console.log("mediaRecorder");
			console.log(mediaRecorder);
		}

		mediaRecorder.onresume = function(){
			log('Resumed  & state = ' + mediaRecorder.state);
		}

		mediaRecorder.onwarning = function(e){
			log('Warning: ' + e);
		};
	}

	function onBtnRecordClicked (){
		$("#current").show();
		if (typeof MediaRecorder === 'undefined' || !navigator.getUserMedia) {
			alert('MediaRecorder not supported on your browser, use Firefox 30 or Chrome 49 instead.');
		}else {
			navigator.getUserMedia(constraints, startRecording, errorCallback);
			recBtn.disabled = true;
			pauseResBtn.disabled = false;
			stopBtn.disabled = false;
		}
	}

	function onBtnStopClicked(){
		$("#current").hide();
		mediaRecorder.stop();
		videoElement.controls = true;

		recBtn.disabled = false;
		pauseResBtn.disabled = true;
		stopBtn.disabled = true;
	}

	function onPauseResumeClicked(){
		if(pauseResBtn.textContent === "Pause"){
			$("#current").hide();
			console.log("pause");
			pauseResBtn.textContent = "Resume";
			mediaRecorder.pause();
			videoElement.pause();
			stopBtn.disabled = true;
		}else{
			$("#current").show();
			console.log("resume");
			pauseResBtn.textContent = "Pause";
			videoElement.play();
			mediaRecorder.resume();
			stopBtn.disabled = false;
		}
		recBtn.disabled = true;
		pauseResBtn.disabled = false;
	}


	function log(message){
		// dataElement.innerHTML+'<br>'+
		$('#data').addClass('bg-primary');
		console.log(dataElement);
		dataElement.innerHTML = message ;
	}



	//browser ID
	function getBrowser(){
		var nVer = navigator.appVersion;
		var nAgt = navigator.userAgent;
		var browserName  = navigator.appName;
		var fullVersion  = ''+parseFloat(navigator.appVersion);
		var majorVersion = parseInt(navigator.appVersion,10);
		var nameOffset,verOffset,ix;

		// In Opera, the true version is after "Opera" or after "Version"
		if ((verOffset=nAgt.indexOf("Opera"))!=-1) {
		 browserName = "Opera";
		 fullVersion = nAgt.substring(verOffset+6);
		 if ((verOffset=nAgt.indexOf("Version"))!=-1)
		   fullVersion = nAgt.substring(verOffset+8);
		}
		// In MSIE, the true version is after "MSIE" in userAgent
		else if ((verOffset=nAgt.indexOf("MSIE"))!=-1) {
		 browserName = "Microsoft Internet Explorer";
		 fullVersion = nAgt.substring(verOffset+5);
		}
		// In Chrome, the true version is after "Chrome"
		else if ((verOffset=nAgt.indexOf("Chrome"))!=-1) {
		 browserName = "Chrome";
		 fullVersion = nAgt.substring(verOffset+7);
		}
		// In Safari, the true version is after "Safari" or after "Version"
		else if ((verOffset=nAgt.indexOf("Safari"))!=-1) {
		 browserName = "Safari";
		 fullVersion = nAgt.substring(verOffset+7);
		 if ((verOffset=nAgt.indexOf("Version"))!=-1)
		   fullVersion = nAgt.substring(verOffset+8);
		}
		// In Firefox, the true version is after "Firefox"
		else if ((verOffset=nAgt.indexOf("Firefox"))!=-1) {
		 browserName = "Firefox";
		 fullVersion = nAgt.substring(verOffset+8);
		}
		// In most other browsers, "name/version" is at the end of userAgent
		else if ( (nameOffset=nAgt.lastIndexOf(' ')+1) <
			   (verOffset=nAgt.lastIndexOf('/')) )
		{
		 browserName = nAgt.substring(nameOffset,verOffset);
		 fullVersion = nAgt.substring(verOffset+1);
		 if (browserName.toLowerCase()==browserName.toUpperCase()) {
		  browserName = navigator.appName;
		 }
		}
		// trim the fullVersion string at semicolon/space if present
		if ((ix=fullVersion.indexOf(";"))!=-1)
		   fullVersion=fullVersion.substring(0,ix);
		if ((ix=fullVersion.indexOf(" "))!=-1)
		   fullVersion=fullVersion.substring(0,ix);

		majorVersion = parseInt(''+fullVersion,10);
		if (isNaN(majorVersion)) {
		 fullVersion  = ''+parseFloat(navigator.appVersion);
		 majorVersion = parseInt(navigator.appVersion,10);
		}


		return browserName;
	}

	$(document).ready(function(){
		$("video").on("timeupdate", function(event){
	    onTrackedVideoFrame(this.currentTime, this.duration);
	  });
	});

	function onTrackedVideoFrame(currentTime, duration){
	  $("#current").text("Record time :"+toHHMMSS(currentTime));
	}

	var toHHMMSS = (secs) => {
    var sec_num = parseInt(secs, 10)
    var hours   = Math.floor(sec_num / 3600) % 24
    var minutes = Math.floor(sec_num / 60) % 60
    var seconds = sec_num % 60
    return [hours,minutes,seconds]
        .map(v => v < 10 ? "0" + v : v)
        .filter((v,i) => v !== "00" || i > 0)
        .join(":")
	}

</script>